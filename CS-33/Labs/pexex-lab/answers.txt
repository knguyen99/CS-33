Khoi Nguyen

Answers.txt

1) The program did not produce the correct mathematical
result because the two numbers are large enough when multiplied
to cause overflow. The instruction that caused this was:
54e014 <arith_driver+372>:	48 8d 04 ad 02 00 00 00 lea    0x2(,%rbp,4),%rax 
The multiplication and shifting of the lea instruction loses data.

2) In data.c, we learn that most-negative-fixnum is equal to MOST_NEGATIVE_FIXNUM,
which is a Lisp integer as stated in the string. So we look into lisp.h next.
In lisp.h, MOST_NEGATIVE_FIXNUM is defined as (-1 - MOST_POSITIVE_FIXNUM). 
MOST_POSITIVE_FIXNUM is defined as (EMACS_INT_MAX >> INTTYPEBITS).
EMACS_INT_MAX is defined as LONG_MAX, which is equal to 0x7FFFFFFFFFFFFFFF (from limits.h)
INTTYPEBITS is 2 since it is equal to GCTYPEBITS -1, and GCTYPEBITS is set as equal
to 3. 
Thus, MOST_POSITIVE_FIXNUM = (0x7FFFFFFFFFFFFFFF >> 2) = 0x1FFFFFFFFFFFFFFF
				= 2305843009213693951
and MOST_NEGATIVE_FIXNUM = -1 -2305843009213693951 = -2305843009213693952

3) From the previous problem MOST_POSITIVE_FIXNUM is 0x1FFFFFFFFFFFFFFF.
From lisp.h, we learn that over flow is handled by masking the number
with INTMASK in order to create a Lisp Int (as used by emacs). Because 
INTMASK is equal to (EMACS_INT_MAX >> (INTTYPEBITS-1)), INTMASK = 
0x3FFFFFFFFFFFFFFF. Using the (MOST_POSITIVE_FIXNUM times itself four times) 
& INTMASK, you get the answer 0x0000000000000001.

4) If we compile with the -fwrapv option, the program will still work because 
overflow would still be allowed. Everything would work the same. The only
issue with this is if the user did not know -fwrapv was on and was expecting
a mathematically correct answer. This will not produce a mathematically correct
answer for multiplications that cause overflow.

